use chrono::Utc;
use rand::{distributions::Alphanumeric, Rng};
use sea_orm::sea_query::OnConflict;
use sea_orm::{
    ActiveModelTrait, ActiveValue, ColumnTrait, DatabaseConnection, EntityTrait, JoinType,
    QueryFilter, QuerySelect,
};
use std::error::Error;
use std::fmt::Debug;
use teloxide::dispatching::dialogue::InMemStorage;
use teloxide::prelude::*;
use teloxide::types::ParseMode;
use teloxide::utils::command::BotCommands;
use trusty_tail::config::Config;
use trusty_tail::{connection, entity::*};

#[derive(BotCommands, Clone, PartialEq, Eq)]
#[command(rename_rule = "snake_case", description = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∫–æ–º–∞–Ω–¥—ã:")]
enum Command {
    Start,
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")]
    Help,
    #[command(description = "–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π")]
    SetEmergencyText,
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π")]
    GetEmergencyText,
    #[command(description = "–û—Ç–º–µ—Ç–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ")]
    ImOk,
    #[command(description = "–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")]
    EnableMonitoring,
    #[command(description = "–í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")]
    DisableMonitoring,
    #[command(description = "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")]
    GetMonitoring,
    #[command(description = "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")]
    GetInvite,
    #[command(description = "–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")]
    AcceptInvite,
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")]
    GetSecondaryOwners,
}

#[derive(Debug, Clone, Default, PartialEq, Eq)]
enum BotDialogState {
    #[default]
    Idle,
    WaitingEmergencyText,
    WaitingForInvite,
}

type BotDialogue = Dialogue<BotDialogState, InMemStorage<BotDialogState>>;

type HandlerResult = Result<(), Box<dyn Error + Send + Sync>>;

const COMMAND_START_TEMPLATE: &str = "–ü—Ä–∏–≤–µ—Ç üëã –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–±–æ—Ç—ã –æ –ø–∏—Ç–æ–º—Ü–∞—Ö, –µ—Å–ª–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.

<strong>–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤:</strong>
–í—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏, –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Å –≤–∞–º–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ. –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, —Ç–æ –º—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—à–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_emergency_text –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –ø–æ–º–æ—â—å—é /get_invite.

<strong>–î–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:</strong>
–í–∞–º –Ω—É–∂–Ω–æ –ª–∏—à—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–∏—Ç–æ–º—Ü–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /accept_invite. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –±–æ—Ç–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å–º–æ—Ç—Ä—è—Ç üê∂";

async fn print_start_info(bot: Bot, message: Message, dialogue: BotDialogue) -> HandlerResult {
    dialogue.exit().await?;

    bot.parse_mode(ParseMode::Html)
        .send_message(message.chat.id, COMMAND_START_TEMPLATE)
        .await?;

    Ok(())
}

async fn print_help_info(bot: Bot, message: Message, dialogue: BotDialogue) -> HandlerResult {
    dialogue.exit().await?;
    bot.send_message(message.chat.id, Command::descriptions().to_string())
        .await?;
    Ok(())
}

const COMMAND_ASK_FOR_INFO_TEMPLATE: &str = "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞—à–µ–º—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É, –µ—Å–ª–∏ –≤—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π. –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∫—Ç–æ-—Ç–æ –º–æ–≥ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –≤–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ, –µ—Å–ª–∏ —Å –≤–∞–º–∏ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏—Ç—Å—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

1Ô∏è‚É£ –î–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –¥–æ–º—É: –ö–∞–∫ –≤–∞—à —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ –≤–∞—à –¥–æ–º, —á—Ç–æ–±—ã –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –≤–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ? –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ.

2Ô∏è‚É£ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞: –ì–¥–µ –≤–∞—à —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?

3Ô∏è‚É£ –ó–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–∞: –ï—Å—Ç—å –ª–∏ —É –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Å–æ–±—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —É—Ö–æ–¥–µ, –æ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –≤–∞—à —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç?

4Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –¥–∏–µ—Ç–∞: –ö–∞–∫—É—é –µ–¥—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?

5Ô∏è‚É£ –û—Å–æ–±—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ—Å–æ–±—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –≤–∞—à–∏–º –ø–∏—Ç–æ–º—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –≤–∞—à —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç? –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–∞—Ö, –ª—é–±–∏–º—ã—Ö –∏–≥—Ä—É—à–∫–∞—Ö, —Å–ø–æ—Å–æ–±–∞—Ö —É—Å–ø–æ–∫–æ–µ–Ω–∏—è –∏ —Ç.–¥.

6Ô∏è‚É£ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞, –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–∏—Ç–æ–º—Ü—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å.";

async fn ask_for_emergency_info(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
) -> HandlerResult {
    dialogue
        .update(BotDialogState::WaitingEmergencyText)
        .await?;
    bot.send_message(message.chat.id, COMMAND_ASK_FOR_INFO_TEMPLATE)
        .await?;
    Ok(())
}

async fn set_emergency_info(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
    connection: DatabaseConnection,
) -> HandlerResult {
    dialogue.exit().await?;
    let new_emergency_info = emergency_info::ActiveModel {
        text: ActiveValue::Set(message.text().unwrap_or("").to_string()),
        chat_id: ActiveValue::Set(message.chat.id.0),
        ..Default::default()
    };
    emergency_info::Entity::insert(new_emergency_info)
        .on_conflict(
            OnConflict::column(emergency_info::Column::ChatId)
                .update_column(emergency_info::Column::Text)
                .to_owned(),
        )
        .exec(&connection)
        .await?;

    bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω")
        .await?;
    Ok(())
}

async fn get_emergency_info(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
    connection: DatabaseConnection,
) -> HandlerResult {
    dialogue.exit().await?;
    let emergency_info = emergency_info::Entity::find()
        .filter(emergency_info::Column::ChatId.eq(message.chat.id.0))
        .one(&connection)
        .await?;
    match emergency_info {
        Some(emergency_info) => {
            bot.send_message(message.chat.id, emergency_info.text)
                .await?;
        }
        None => {
            bot.send_message(message.chat.id, "–ù–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π ü§∑")
                .await?;
        }
    }
    Ok(())
}

async fn im_ok(bot: Bot, message: Message, dialogue: BotDialogue) -> HandlerResult {
    dialogue.exit().await?;
    bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, –≤—Å–µ –æ—Ç–º–µ—Ç–∏–ª–∏")
        .await?;
    Ok(())
}

async fn enable_monitoring(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
    connection: DatabaseConnection,
) -> HandlerResult {
    dialogue.exit().await?;

    monitoring_statuses::Entity::insert(monitoring_statuses::ActiveModel {
        chat_id: ActiveValue::Set(message.chat.id.0),
        enabled: ActiveValue::Set(true),
        ..Default::default()
    })
    .on_conflict(
        OnConflict::column(monitoring_statuses::Column::ChatId)
            .update_column(monitoring_statuses::Column::Enabled)
            .to_owned(),
    )
    .exec(&connection)
    .await?;

    bot.send_message(message.chat.id, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω")
        .await?;
    Ok(())
}

async fn disable_monitoring(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
    connection: DatabaseConnection,
) -> HandlerResult {
    dialogue.exit().await?;

    monitoring_statuses::Entity::insert(monitoring_statuses::ActiveModel {
        chat_id: ActiveValue::Set(message.chat.id.0),
        enabled: ActiveValue::Set(false),
        ..Default::default()
    })
    .on_conflict(
        OnConflict::column(monitoring_statuses::Column::ChatId)
            .update_column(monitoring_statuses::Column::Enabled)
            .to_owned(),
    )
    .exec(&connection)
    .await?;

    bot.send_message(message.chat.id, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω")
        .await?;
    Ok(())
}

async fn get_monitoring(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
    connection: DatabaseConnection,
) -> HandlerResult {
    dialogue.exit().await?;

    let monitoring_status = monitoring_statuses::Entity::find()
        .filter(monitoring_statuses::Column::ChatId.eq(message.chat.id.0))
        .one(&connection)
        .await?;

    match monitoring_status {
        Some(monitoring_status) => {
            bot.send_message(
                message.chat.id,
                format!(
                    "–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}",
                    if monitoring_status.enabled {
                        "–í–∫–ª—é—á–µ–Ω"
                    } else {
                        "–í—ã–∫–ª—é—á–µ–Ω"
                    }
                ),
            )
            .await?;
        }
        None => {
            bot.send_message(message.chat.id, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–¥–∞–Ω")
                .await?;
        }
    }

    Ok(())
}

async fn get_invite_code(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
    connection: DatabaseConnection,
) -> HandlerResult {
    dialogue.exit().await?;

    let invite = match invites::Entity::find()
        .filter(invites::Column::ChatId.eq(message.chat.id.0))
        .one(&connection)
        .await?
    {
        Some(invite) => invite,
        None => {
            let invite_code = rand::thread_rng()
                .sample_iter(&Alphanumeric)
                .take(8)
                .map(char::from)
                .collect();

            let invite = invites::ActiveModel {
                chat_id: ActiveValue::Set(message.chat.id.0),
                invite: ActiveValue::Set(invite_code),
                ..Default::default()
            };

            invite.insert(&connection).await?
        }
    };

    bot.send_message(message.chat.id, invite.invite).await?;
    Ok(())
}

async fn ask_for_invite(bot: Bot, message: Message, dialogue: BotDialogue) -> HandlerResult {
    dialogue.update(BotDialogState::WaitingForInvite).await?;
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
        .await?;
    Ok(())
}

async fn accept_invite(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
    connection: DatabaseConnection,
) -> HandlerResult {
    dialogue.exit().await?;

    let invite_code = message.text().unwrap_or("").to_string();
    let invite = invites::Entity::find()
        .filter(invites::Column::Invite.eq(invite_code))
        .one(&connection)
        .await
        .ok()
        .flatten();

    if invite.is_none() {
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            .await?;
        return Ok(());
    }
    let invite = invite.unwrap();

    secondary_owners::Entity::insert(secondary_owners::ActiveModel {
        primary_owner_chat_id: ActiveValue::Set(invite.chat_id),
        secondary_owner_chat_id: ActiveValue::Set(message.chat.id.0),
        ..Default::default()
    })
    .exec(&connection)
    .await?;

    bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ!").await?;
    Ok(())
}

async fn get_secondary_owners(
    bot: Bot,
    message: Message,
    dialogue: BotDialogue,
    connection: DatabaseConnection,
) -> HandlerResult {
    dialogue.exit().await?;

    let profiles = profiles::Entity::find()
        .join_rev(
            JoinType::InnerJoin,
            secondary_owners::Entity::belongs_to(profiles::Entity)
                .from(secondary_owners::Column::SecondaryOwnerChatId)
                .to(profiles::Column::ChatId)
                .into(),
        )
        .filter(secondary_owners::Column::PrimaryOwnerChatId.eq(message.chat.id.0))
        .all(&connection)
        .await?;

    if profiles.is_empty() {
        bot.send_message(message.chat.id, "–ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            .await?;
    } else {
        let formatted_profiles = profiles
            .iter()
            .map(|profile| format!("@{}", profile.username.clone()))
            .collect::<Vec<_>>()
            .join("\n");

        bot.send_message(message.chat.id, formatted_profiles)
            .await?;
    }
    Ok(())
}

async fn mark_alive(message: Message, connection: DatabaseConnection) {
    let _ = alive_events::Entity::insert(alive_events::ActiveModel {
        chat_id: ActiveValue::Set(message.chat.id.0),
        timestamp: ActiveValue::Set(Utc::now().naive_utc()),
        ..Default::default()
    })
    .on_conflict(
        OnConflict::column(alive_events::Column::ChatId)
            .update_column(alive_events::Column::Timestamp)
            .to_owned(),
    )
    .exec(&connection)
    .await
    .unwrap();
}

async fn update_profile(message: Message, connection: DatabaseConnection) {
    let username = message
        .from()
        .and_then(|user| user.username.clone())
        .unwrap_or("Unknown".to_string());

    let _ = profiles::Entity::insert(profiles::ActiveModel {
        chat_id: ActiveValue::Set(message.chat.id.0),
        username: ActiveValue::Set(username),
        ..Default::default()
    })
    .on_conflict(
        OnConflict::column(profiles::Column::ChatId)
            .update_column(profiles::Column::Username)
            .to_owned(),
    )
    .exec(&connection)
    .await
    .unwrap();
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    pretty_env_logger::init();
    log::info!("Starting...");
    let config = Config::init();

    let _guard = sentry::init((
        config.sentry_url,
        sentry::ClientOptions {
            release: sentry::release_name!(),
            ..Default::default()
        },
    ));

    let connection = connection::init().await?;

    let bot = Bot::from_env();

    let handler = Update::filter_message()
        .enter_dialogue::<Message, InMemStorage<BotDialogState>, BotDialogState>()
        .map(|message: Message| {
            let text = message.text().unwrap_or_default();
            Command::parse(&text, "").ok()
        })
        .map_async(|dialogue: BotDialogue| async move { dialogue.get().await.ok().flatten() })
        // Middleware
        .inspect_async(mark_alive)
        .inspect_async(update_profile)
        // Commands
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::Start)))
                .endpoint(print_start_info),
        )
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::Help)))
                .endpoint(print_help_info),
        )
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::SetEmergencyText)))
                .endpoint(ask_for_emergency_info),
        )
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::GetEmergencyText)))
                .endpoint(get_emergency_info),
        )
        .branch(dptree::filter(|command| matches!(command, Some(Command::ImOk))).endpoint(im_ok))
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::EnableMonitoring)))
                .endpoint(enable_monitoring),
        )
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::DisableMonitoring)))
                .endpoint(disable_monitoring),
        )
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::GetMonitoring)))
                .endpoint(get_monitoring),
        )
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::GetInvite)))
                .endpoint(get_invite_code),
        )
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::AcceptInvite)))
                .endpoint(ask_for_invite),
        )
        .branch(
            dptree::filter(|command| matches!(command, Some(Command::GetSecondaryOwners)))
                .endpoint(get_secondary_owners),
        )
        // Dialogs
        .branch(
            dptree::filter(|state: BotDialogState| {
                matches!(state, BotDialogState::WaitingEmergencyText)
            })
            .endpoint(set_emergency_info),
        )
        .branch(
            dptree::filter(|state: BotDialogState| {
                matches!(state, BotDialogState::WaitingForInvite)
            })
            .endpoint(accept_invite),
        )
        .endpoint(|bot: Bot, message: Message| async move {
            bot.send_message(message.chat.id, "Unknown command!")
                .await?;
            Ok(())
        });

    log::info!("Started listening...");
    Dispatcher::builder(bot, handler)
        .dependencies(dptree::deps![
            InMemStorage::<BotDialogState>::new(),
            connection
        ])
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;

    Ok(())
}
